/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/docs/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import * as nestAccessControl from "nest-access-control";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { CreateBlendArgs } from "./CreateBlendArgs";
import { UpdateBlendArgs } from "./UpdateBlendArgs";
import { DeleteBlendArgs } from "./DeleteBlendArgs";
import { BlendFindManyArgs } from "./BlendFindManyArgs";
import { BlendFindUniqueArgs } from "./BlendFindUniqueArgs";
import { Blend } from "./Blend";
import { CoffeeBrandFindManyArgs } from "../../coffeeBrand/base/CoffeeBrandFindManyArgs";
import { CoffeeBrand } from "../../coffeeBrand/base/CoffeeBrand";
import { BlendService } from "../blend.service";

@graphql.Resolver(() => Blend)
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
export class BlendResolverBase {
  constructor(
    protected readonly service: BlendService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Blend",
    action: "read",
    possession: "any",
  })
  async _blendsMeta(
    @graphql.Args() args: BlendFindManyArgs
  ): Promise<MetaQueryPayload> {
    const results = await this.service.count({
      ...args,
      skip: undefined,
      take: undefined,
    });
    return {
      count: results,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Blend])
  @nestAccessControl.UseRoles({
    resource: "Blend",
    action: "read",
    possession: "any",
  })
  async blends(@graphql.Args() args: BlendFindManyArgs): Promise<Blend[]> {
    return this.service.findMany(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Blend, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Blend",
    action: "read",
    possession: "own",
  })
  async blend(
    @graphql.Args() args: BlendFindUniqueArgs
  ): Promise<Blend | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Blend)
  @nestAccessControl.UseRoles({
    resource: "Blend",
    action: "create",
    possession: "any",
  })
  async createBlend(@graphql.Args() args: CreateBlendArgs): Promise<Blend> {
    return await this.service.create({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Blend)
  @nestAccessControl.UseRoles({
    resource: "Blend",
    action: "update",
    possession: "any",
  })
  async updateBlend(
    @graphql.Args() args: UpdateBlendArgs
  ): Promise<Blend | null> {
    try {
      return await this.service.update({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Blend)
  @nestAccessControl.UseRoles({
    resource: "Blend",
    action: "delete",
    possession: "any",
  })
  async deleteBlend(
    @graphql.Args() args: DeleteBlendArgs
  ): Promise<Blend | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [CoffeeBrand])
  @nestAccessControl.UseRoles({
    resource: "CoffeeBrand",
    action: "read",
    possession: "any",
  })
  async coffeeBrands(
    @graphql.Parent() parent: Blend,
    @graphql.Args() args: CoffeeBrandFindManyArgs
  ): Promise<CoffeeBrand[]> {
    const results = await this.service.findCoffeeBrands(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }
}
