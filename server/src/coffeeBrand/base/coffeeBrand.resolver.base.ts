/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/docs/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import * as nestAccessControl from "nest-access-control";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { CreateCoffeeBrandArgs } from "./CreateCoffeeBrandArgs";
import { UpdateCoffeeBrandArgs } from "./UpdateCoffeeBrandArgs";
import { DeleteCoffeeBrandArgs } from "./DeleteCoffeeBrandArgs";
import { CoffeeBrandFindManyArgs } from "./CoffeeBrandFindManyArgs";
import { CoffeeBrandFindUniqueArgs } from "./CoffeeBrandFindUniqueArgs";
import { CoffeeBrand } from "./CoffeeBrand";
import { Blend } from "../../blend/base/Blend";
import { User } from "../../user/base/User";
import { CoffeeBrandService } from "../coffeeBrand.service";

@graphql.Resolver(() => CoffeeBrand)
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
export class CoffeeBrandResolverBase {
  constructor(
    protected readonly service: CoffeeBrandService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "CoffeeBrand",
    action: "read",
    possession: "any",
  })
  async _coffeeBrandsMeta(
    @graphql.Args() args: CoffeeBrandFindManyArgs
  ): Promise<MetaQueryPayload> {
    const results = await this.service.count({
      ...args,
      skip: undefined,
      take: undefined,
    });
    return {
      count: results,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [CoffeeBrand])
  @nestAccessControl.UseRoles({
    resource: "CoffeeBrand",
    action: "read",
    possession: "any",
  })
  async coffeeBrands(
    @graphql.Args() args: CoffeeBrandFindManyArgs
  ): Promise<CoffeeBrand[]> {
    return this.service.findMany(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => CoffeeBrand, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "CoffeeBrand",
    action: "read",
    possession: "own",
  })
  async coffeeBrand(
    @graphql.Args() args: CoffeeBrandFindUniqueArgs
  ): Promise<CoffeeBrand | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => CoffeeBrand)
  @nestAccessControl.UseRoles({
    resource: "CoffeeBrand",
    action: "create",
    possession: "any",
  })
  async createCoffeeBrand(
    @graphql.Args() args: CreateCoffeeBrandArgs
  ): Promise<CoffeeBrand> {
    return await this.service.create({
      ...args,
      data: {
        ...args.data,

        blend: args.data.blend
          ? {
              connect: args.data.blend,
            }
          : undefined,

        user: args.data.user
          ? {
              connect: args.data.user,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => CoffeeBrand)
  @nestAccessControl.UseRoles({
    resource: "CoffeeBrand",
    action: "update",
    possession: "any",
  })
  async updateCoffeeBrand(
    @graphql.Args() args: UpdateCoffeeBrandArgs
  ): Promise<CoffeeBrand | null> {
    try {
      return await this.service.update({
        ...args,
        data: {
          ...args.data,

          blend: args.data.blend
            ? {
                connect: args.data.blend,
              }
            : undefined,

          user: args.data.user
            ? {
                connect: args.data.user,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => CoffeeBrand)
  @nestAccessControl.UseRoles({
    resource: "CoffeeBrand",
    action: "delete",
    possession: "any",
  })
  async deleteCoffeeBrand(
    @graphql.Args() args: DeleteCoffeeBrandArgs
  ): Promise<CoffeeBrand | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Blend, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Blend",
    action: "read",
    possession: "any",
  })
  async blend(@graphql.Parent() parent: CoffeeBrand): Promise<Blend | null> {
    const result = await this.service.getBlend(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => User, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "User",
    action: "read",
    possession: "any",
  })
  async user(@graphql.Parent() parent: CoffeeBrand): Promise<User | null> {
    const result = await this.service.getUser(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
